syntax = "proto2";

package Oauth2Proto;

option java_package = "io.github.jinganix.guess.proto.imports.oauth2";

import "imports/WebpbOptions.proto";
import "webpb/WebpbExtend.proto";

enum ResponseType {
  CODE = 0 [(v_opts).opt = {value: 'code'}];
}

enum GrantType {
  AUTHORIZATION_CODE = 0 [(v_opts).opt = {value: 'authorization_code'}];
  REFRESH_TOKEN = 1 [(v_opts).opt = {value: 'refresh_token'}];
  CLIENT_CREDENTIALS = 2 [(v_opts).opt = {value: 'client_credentials'}];
  WEAPP = 3 [(v_opts).opt = {value: 'weapp'}];
}

enum TokenType {
  BEARER = 0 [(v_opts).opt = {value: 'Bearer'}];
}

message Oauth2LoginRequest {
  option (m_opts).opt = {
    method: "GET"
    path: "/oauth2/login"
  };

  required string username = 1;
  required string password = 2;
}

message Oauth2AuthorizeRequest {
  option (m_opts).opt = {
    method: "GET"
    path: "/oauth2/authorize?response_type={type}&client_id={clientId}&scope={scope}&redirect_uri={redirectUri}&state={state}"
  };

  required ResponseType type = 1 [(opts).opt = {in_query: true}];
  required string clientId = 2 [(opts).opt = {in_query: true}];
  required string scope = 3 [(opts).opt = {in_query: true}];
  required string redirectUri = 4 [(opts).opt = {in_query: true}];
  required string state = 5 [(opts).opt = {in_query: true}];
}

message Oauth2TokenRequest {
  option (m_opts).opt = {
    method: "POST"
    path: "/oauth2/token"
  };

  required GrantType grantType = 1 [(opts).ts = {alias: 'grant_type'}];
  required string clientId = 2 [(opts).ts = {alias: 'client_id'}];
  optional string redirectUri = 3 [(opts).ts = {alias: 'redirect_uri'}];
  optional string code = 4;
  optional string refreshToken = 5 [(opts).ts = {alias: 'refresh_token'}];
  optional string scope = 6;
}

message Oauth2TokenResponse {
  required string accessToken = 1 [(opts).ts = {alias: 'access_token'}];
  required int64 expiresIn = 2 [(opts).ts = {alias: 'expires_in'}];
  required string refreshToken = 3 [(opts).ts = {alias: 'refresh_token'}];
  required string tokenType = 4 [(opts).ts = {alias: 'token_type'}];
  required string scope = 5;
}

message Oauth2LogoutRequest {
  option (m_opts).opt = {
    method: "GET"
    path: "/oauth2/logout"
  };
}

message Oauth2ConsentRequest {
  option (m_opts).opt = {
    method: "GET"
    path: "/oauth2/consent?client_id={clientId}&scope={scope}&state={state}"
  };

  required string clientId = 1 [(opts).opt = {in_query: true}, (opts).java = {annotation: '@NotNull'}];
  required string scope = 2 [(opts).opt = {in_query: true}, (opts).java = {annotation: '@NotNull'}];
  required string state = 3 [(opts).opt = {in_query: true}, (opts).java = {annotation: '@NotNull'}];
}

message Oauth2ConsentResponse {
  required string clientId = 1;
  required string principalName = 2;
  required string state = 3;
  repeated string scopes = 4;
  repeated string approvedScopes = 5;
}
